/* tslint:disable */
/* eslint-disable */
/**
 * server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateChannelResponse,
  CreateWorkspaceChannelRequest,
  CreateWorkspaceRequest,
  CreateWorkspaceResponse,
  GetChannelsResponse,
  GetUserWorkspacesResponse,
  GetWorkspacePublicInfoResponse,
  GetWorkspaceResponse,
  JoinCodeResponse,
  JoinWorkspaceRequest,
  ProblemDetails,
  ValidationProblemDetails,
} from '../models/index';

export interface ApiWorkspacesIdChannelsGetRequest {
    id: number;
}

export interface ApiWorkspacesIdChannelsPostRequest {
    id: number;
    createWorkspaceChannelRequest?: CreateWorkspaceChannelRequest;
}

export interface ApiWorkspacesIdDeleteRequest {
    id: number;
}

export interface ApiWorkspacesIdGetRequest {
    id: number;
}

export interface ApiWorkspacesIdJoinCodePostRequest {
    id: number;
}

export interface ApiWorkspacesIdJoinPostRequest {
    id: number;
    joinWorkspaceRequest?: JoinWorkspaceRequest;
}

export interface ApiWorkspacesIdPublicInfoGetRequest {
    id: number;
}

export interface ApiWorkspacesPostRequest {
    createWorkspaceRequest?: CreateWorkspaceRequest;
}

/**
 * 
 */
export class WorkspacesApi extends runtime.BaseAPI {

    /**
     */
    async apiWorkspacesIdChannelsGetRaw(requestParameters: ApiWorkspacesIdChannelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChannelsResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiWorkspacesIdChannelsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Workspaces/{id}/channels`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiWorkspacesIdChannelsGet(requestParameters: ApiWorkspacesIdChannelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChannelsResponse> {
        const response = await this.apiWorkspacesIdChannelsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiWorkspacesIdChannelsPostRaw(requestParameters: ApiWorkspacesIdChannelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateChannelResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiWorkspacesIdChannelsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Workspaces/{id}/channels`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createWorkspaceChannelRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiWorkspacesIdChannelsPost(requestParameters: ApiWorkspacesIdChannelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateChannelResponse> {
        const response = await this.apiWorkspacesIdChannelsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiWorkspacesIdDeleteRaw(requestParameters: ApiWorkspacesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiWorkspacesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Workspaces/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiWorkspacesIdDelete(requestParameters: ApiWorkspacesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWorkspacesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiWorkspacesIdGetRaw(requestParameters: ApiWorkspacesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspaceResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiWorkspacesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Workspaces/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiWorkspacesIdGet(requestParameters: ApiWorkspacesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspaceResponse> {
        const response = await this.apiWorkspacesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiWorkspacesIdJoinCodePostRaw(requestParameters: ApiWorkspacesIdJoinCodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JoinCodeResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiWorkspacesIdJoinCodePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Workspaces/{id}/join-code`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiWorkspacesIdJoinCodePost(requestParameters: ApiWorkspacesIdJoinCodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JoinCodeResponse> {
        const response = await this.apiWorkspacesIdJoinCodePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiWorkspacesIdJoinPostRaw(requestParameters: ApiWorkspacesIdJoinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiWorkspacesIdJoinPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Workspaces/{id}/join`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['joinWorkspaceRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiWorkspacesIdJoinPost(requestParameters: ApiWorkspacesIdJoinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiWorkspacesIdJoinPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiWorkspacesIdPublicInfoGetRaw(requestParameters: ApiWorkspacesIdPublicInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspacePublicInfoResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiWorkspacesIdPublicInfoGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Workspaces/{id}/public-info`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiWorkspacesIdPublicInfoGet(requestParameters: ApiWorkspacesIdPublicInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspacePublicInfoResponse> {
        const response = await this.apiWorkspacesIdPublicInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiWorkspacesMyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserWorkspacesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Workspaces/my`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiWorkspacesMyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserWorkspacesResponse> {
        const response = await this.apiWorkspacesMyGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiWorkspacesPostRaw(requestParameters: ApiWorkspacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateWorkspaceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Workspaces`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createWorkspaceRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiWorkspacesPost(requestParameters: ApiWorkspacesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateWorkspaceResponse> {
        const response = await this.apiWorkspacesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
