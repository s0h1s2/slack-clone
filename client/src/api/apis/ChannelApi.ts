/* tslint:disable */
/* eslint-disable */
/**
 * server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChannelResponse,
  GetChannelMessagesResponse,
} from '../models/index';

export interface ApiChannelIdChatPostRequest {
    id: number;
    chat?: string;
    attachment?: Blob;
}

export interface ApiChannelIdGetRequest {
    id: number;
}

export interface ApiChannelIdMessagesGetRequest {
    id: number;
}

/**
 * 
 */
export class ChannelApi extends runtime.BaseAPI {

    /**
     */
    async apiChannelIdChatPostRaw(requestParameters: ApiChannelIdChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiChannelIdChatPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['chat'] != null) {
            formParams.append('Chat', requestParameters['chat'] as any);
        }

        if (requestParameters['attachment'] != null) {
            formParams.append('Attachment', requestParameters['attachment'] as any);
        }

        const response = await this.request({
            path: `/api/Channel/{id}/chat`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiChannelIdChatPost(requestParameters: ApiChannelIdChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiChannelIdChatPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiChannelIdGetRaw(requestParameters: ApiChannelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiChannelIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Channel/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiChannelIdGet(requestParameters: ApiChannelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelResponse> {
        const response = await this.apiChannelIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiChannelIdMessagesGetRaw(requestParameters: ApiChannelIdMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChannelMessagesResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiChannelIdMessagesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Channel/{id}/messages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiChannelIdMessagesGet(requestParameters: ApiChannelIdMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChannelMessagesResponse> {
        const response = await this.apiChannelIdMessagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
